# .aliases

# Import any variables from ~/.variables
# This should include things like app_dir=/foo/bar
#   and can be based on ~./dotfiles/variables_default
# source ~/.variables

PATH=$PATH:$HOME/bin:$HOME/.composer/vendor/bin:~/sites/tools/flutter/bin
PATH=$(pyenv root)/shims:$PATH
# PATH="/Users/Shared/Herd/services/postgresql/16/bin:$PATH"
PATH="/Users/jakebathman/Library/Application Support/Postgres/var-16/postgresql.conf:$PATH"
export PATH

#-----------------------------------------------------
# SCRATCH
#-----------------------------------------------------

alias cpr=/Users/jakebathman/sites/scripts/commit-to-pr/commit-to-pr

function git_add_remote() { 

    RED="\033[1;91m"
    GREEN="\033[1;92m"
    YELLOW="\033[1;93m"
    CYAN="\033[1;96m"
    NC="\033[m"

    U=""
    B=""
    DIR=""

    # usage info for -h flag
    usage="
usage: $(basename "$0") ${YELLOW}username:branch-name${NC}
   or: $(basename "$0") ${CYAN}-u username -b branch-name${NC}

This adds the specified GitHub fork and branch as a remote to the current repo. Specifically, it is a shorthand for these commands:

    ${GREEN}git remote add username-remote git@github.com:username/repo.git
    git fetch username-remote
    git checkout -b username-branch-name username/branch-name${NC}

You can pass the username and repo easily by copying it from the top of a pull request, as ${YELLOW}username:branch-name${NC}. 
You can also pass it using the ${CYAN}-u username${NC} and ${CYAN}-b branch-name${NC} flags
"

    # set option flag values
    while getopts hb:u: option
    do
        case "${option}" in
            h) echo -e "$usage"
            return;;
            b) B="${OPTARG}";;
            u) U="${OPTARG}";;
            :) echo -e "missing argument for -%s\n" "$OPTARG" >&2
            return;;
            \?) echo -e "unknown option: -%s\n" "$OPTARG" >&2
            return;;
        esac
    done

    # make sure we're in a git repo
    inside_git_repo="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
    if [ ! "$inside_git_repo" ]; then
        echo ${RED}"ERROR! Not inside a git repo. Quitting..."
        return
    fi

    # assemble some variables
    DIR=$(basename `pwd`)
    echo "U: $U"
    echo "B: $B"

    if [ -z "$U" ] && [ -z "$B" ]; then
        U=$(echo $1 | cut -s -d':' -f1)
        B=$(echo $1 | cut -s -d':' -f2)
    fi

    # Check again, and error if something's missing
    if [ -z "$U" ] && [ -z "$B" ]; then
        U=$(echo $1 | cut -d':' -f1)
        B=$(echo $1 | cut -d':' -f2)
    fi
   
    echo "U: $U"
    echo "B: $B"
    echo "DIR: $DIR"
}


#-----------------------------------------------------
# Aliases
#-----------------------------------------------------

alias cdapp='cd ${app_dir}';

alias tm='tmux -2 attach || tmux -2'

alias va='vim ~/.aliases'

alias drink='gulp;notify -m "Gulp task complete!" -t "Gulp" -n Frog;'

alias dcomp='docker-compose'
alias dcu='docker-compose up -d'
alias dcd='docker-compose down'
alias dcr='docker-compose restart'

alias yt="youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4'"

# Copy SSH, but first copy name of computer (for key label in GitHub or Forge)
alias copyssh="echo Merricat - JakeBathman MacBook Pro | pbcopy && pbcopy < ~/.ssh/id_rsa.pub"

# gWiz docker "ssh"
alias gssh='clear && echo "root@gwiz-docker" && docker exec -it gwiz-docker-laravel-1 bash -c "cd /mnt/shared/sites;exec /bin/bash -sh"'

# Placeholder notification function
# Should be overridden on each platform
notify() {
  echo "$1" "$2" "$3"
}

alias vbash='vim ~/.bashrc'
alias sb='source ~/.bashrc'
alias mfs='php artisan migrate:fresh --seed'
alias code_and_fork='fork . && code .'
alias repoinit=_repoinit
_repoinit() {
  echo -e $Cyan"\n\ncp .env.example .env"$NC
  cp .env.example .env
  
  echo -e $Cyan"\n\ncomposer install"$NC
  composer install
  
  echo -e $Cyan"\n\nnpm install"$NC
  npm install

  if npm run | grep -A1 'dev' | grep -q 'vite'; then
    # This repo uses vite, so run build instead of dev
    echo -e $Cyan"\n\nnpm run build"$NC
    npm run build
  else
    echo -e $Cyan"\n\nnpm run dev"$NC
    npm run dev
  fi
  
  echo -e $Cyan"\n\nphp artisan key:generate"$NC
  php artisan key:generate
  
  echo -e $Cyan"\n\nphp artisan migrate:fresh --seed"$NC
  php artisan migrate:fresh --seed 
  
  echo -e $Cyan"\n\nphp artisan cache:clear"$NC
  php artisan cache:clear
}

alias reporeset=_reporeset
_reporeset() {
  if [[ $(basename "$PWD") == "nexus" ]]; then
    echo "Resetting the repo using Lando"
    _landoreporeset
    return
  fi

  # For projects that use sail, run through sail instead
  if [[ -f composer.json ]] && grep -q '"laravel/sail"' composer.json; then
    echo "Resetting the repo using Sail"
    _sailreporeset
    return
  fi

  echo -e $Cyan"\n\ncomposer install"$NC
  composer install
  
  echo -e $Cyan"\n\nnpm install"$NC
  npm install

  if npm run | grep -A1 'dev' | grep -q 'vite'; then
    # This repo uses vite, so run build instead of dev
    echo -e $Cyan"\n\nnpm run build"$NC
    npm run build
  else
    echo -e $Cyan"\n\nnpm run dev"$NC
    npm run dev
  fi

  echo -e $Cyan"\n\nphp artisan migrate:fresh --seed"$NC
  php artisan migrate:fresh --seed 
  
  echo -e $Cyan"\n\nphp artisan cache:clear"$NC
  php artisan cache:clear
}

_landoreporeset() {
  echo -e $Cyan"\n\nlando composer install"$NC
  lando composer install
  
  echo -e $Cyan"\n\nlando npm install"$NC
  lando npm install

  if lando npm run | grep -A1 'dev' | grep -q 'vite'; then
    # This repo uses vite, so run build instead of dev
    echo -e $Cyan"\n\nlando npm run build"$NC
    lando npm run build
  else
    echo -e $Cyan"\n\nlando npm run dev"$NC
    lando npm run dev
  fi

  echo -e $Cyan"\n\nlando artisan migrate:fresh --seed"$NC
  lando artisan migrate:fresh --seed 
  
  echo -e $Cyan"\n\nlando artisan cache:clear"$NC
  lando artisan cache:clear
}

_sailreporeset() {
  # Check that the container is running
  container_name=$(basename "$(pwd)")

  if docker ps --format '{{.Names}}' | grep -q "${container_name}[_-]laravel.test"; then
    echo "Laravel Sail container is running.\n"
  else
    echo -e $RED"Laravel Sail container is NOT running.\n"$NC
    echo "\nWould you like to start the Laravel Sail container? (y/n) "
    read answer

    case ${answer:0:1} in
      y|Y )
        ./vendor/bin/sail up -d
      ;;
      * )
        echo "Not starting the Laravel Sail container.\n"
      ;;
    esac
  fi

  echo -e $Cyan"\n\nsail composer install"$NC
  sail composer install
  
  echo -e $Cyan"\n\nsail npm install"$NC
  sail npm install

  if sail npm run | grep -A1 'dev' | grep -q 'vite'; then
    # This repo uses vite, so run build instead of dev
    echo -e $Cyan"\n\nsail npm run build"$NC
    sail npm run build
  else
    echo -e $Cyan"\n\nsail npm run dev"$NC
    sail npm run dev
  fi

  echo "Do you want to migrate fresh? (y/n) "
  read answer

  case ${answer:0:1} in
    y|Y )
      echo -e $Cyan"\n\nsail artisan migrate:fresh --seed"$NC
      sail artisan migrate:fresh --seed
    ;;
    * )
      echo -e $Cyan"\n\nsail artisan migrate"$NC
      sail artisan migrate
    ;;
  esac
  
  echo -e $Cyan"\n\nsail artisan cache:clear"$NC
  sail artisan cache:clear
}

alias vz='vim ~/.zshrc'
alias sz='source ~/.zshrc'

alias redis=redis-cli
alias c='clear'
alias comp='composer'

# Copy & vim the new file
cpvim() {
  cp "$1" "$2"
  vim "$2"
}

# Make directory and cd into it
mkcd() {
  mkdir "$1"
  cd "$1"
}

alias sail='[ -f sail ] && ./sail || ./vendor/bin/sail'

# alias phpunit="./vendor/bin/phpunit"
# Try multiple places for phpunit to live
alias pu=_phpunit
_phpunit() {
  if type './vendor/bin/phpunit' 2>/dev/null | grep -q 'function'; then
    ./vendor/bin/phpunit "$@"
  else
    ./vendor/phpunit/phpunit/phpunit "$@"
  fi
}

# Try multiple places for phpunit-watcher, falling back to global
alias pw=_phpunitwatcher
_phpunitwatcher() {
  if type './vendor/bin/phpunit-watcher' 2>/dev/null | grep -q 'function'; then
    ./vendor/bin/phpunit-watcher watch "$@"
  elif type './vendor/bin/phpunit-watcher' 2>/dev/null | grep -q 'function'; then
    ./bin/phpunit-watcher watch "$@"
  else
    phpunit-watcher watch "$@"
  fi
}

alias tink="php artisan tinker"
alias art="php artisan"

alias lsa=_lsa
alias ls=_lsa
_lsa(){
  echo -e $BYellow"ls -lsAh --color --file-type --group-directories-first --time-style=+\"%Y-%m-%d %T\"$NC\n"
  \ls -lsAh --color --file-type --group-directories-first --time-style=+"%Y-%m-%d %T"
}

alias logslaravel=_logslaravel
_logslaravel() {
  # first, what grep do we use. Check for ggrep existence, and fall back to grep
  if type 'ggrep' 2>/dev/null | grep -q 'function'; then 
    FNGREP="grep"
  else
    FNGREP="ggrep"
  fi

  which $FNGREP

  # see if we're in a laravel project root right now
  if [ -d "storage" ]; then
    project_root="$(pwd)/"
  elif [ -d "app/storage" ]; then
    project_root="$(pwd)/"
  else
    current_pwd="$(pwd)"
    proj="${app_dir}"

    # check that the current directory is the root of a project
    if [[ $current_pwd != *"$proj" ]]; then
      cd "$proj"
    fi

    let i=0 # define counting variable
    W=() # define working array
    while read -r line; do # process file by file
      let i=$i+1
      if [ -d "${proj}${line}storage/logs" ]; then
        W+=($i "$line")
      fi
      if [ -d "${proj}${line}app/storage/logs" ]; then
        W+=($i "$line")
      fi
    done < <( ls -1 -d */ )
    FILE=$(dialog --title "List file of directory /home" --menu "Chose one" 24 80 17 "${W[@]}" 3>&2 2>&1 1>&3) # show dialog and store output

    if [ $? -eq 0 ]; then # Exit with OK
      theproject=$(ls -1d */ | sed -n "`echo "$FILE p" | sed 's/ //'`")
    else
      echo "no directories :("
    fi
    project_root="${proj}${theproject}";
  fi

  # make sure the log file is in the place we expect (might not be, due to laravel 4/5 diffs)
  if [ -d "${project_root}app/storage/logs" ]; then
    project_root="${project_root}app/";
  fi
  clear;
  echo -e $BYellow"tail -f -n 150 laravel.log\n"$NC;
  if [ "$1" = "-f" ]; then
    # Filter out the stack trace lines (easier to read)
    echo "Filtering using:\n";
    echo -e $BYellow"grep -i -E \"^\[[[:digit:]]{4}\-[[:digit:]]{2}\-[[:digit:]]{2} [[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}\]|Next exception\" --color\n"$NC;
    tail -f -n 450 "$project_root"storage/logs/laravel.log | $FNGREP -i -E "^\[[[:digit:]]{4}\-[[:digit:]]{2}\-[[:digit:]]{2} [[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}\]|Next [\w\W]+?\:" --color
  else
    tail -f -n 50 "$project_root"storage/logs/laravel.log | $FNGREP -iE '^\[[[:digit:]]{4}\-[[:digit:]]{2}\-[[:digit:]]{2} [[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}\] [[:alnum:]\.]+:|Next [\w\W]+?\:|\/([[:alnum:]]+(\.php)?:[[:digit:]]+)|$' --color=always 
    # tail -f -n 150 "$project_root"storage/logs/laravel.log | grep -i -E "^\[[[:digit:]]{4}\-[[:digit:]]{2}\-[[:digit:]]{2} [[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2}\]|Next [\w\W]+?\:|$" --color
  fi

}

# Quick git helpers
alias gs='git status'
alias gf='echo -e $BGreen"git fetch -v --all -t -p --progress 2>&1 | grep -v \"up to date\"$NC\n";git fetch -v --all -t -p --progress 2>&1 | grep -v "up to date"'
alias gl="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gd='echo -e $BGreen"git diff --color=always\n\n"$NC;git diff --color=always'
alias gprune='git branch --merged | grep -v "\*" | grep -vE "^\s*(master|prod|main|qa|develop|geneweaver|release-1.x|dev)" | xargs -n 1 git branch -d'

# sync a fork using the upstream branch 
gfu(){
  
  BRANCH="$1"
  if [ -z "$1" ]; then
    BRANCH="master"
  fi
  
  echo -n "Fetch and merge upstream for branch $BWhite$BRANCH$NC? [y/N]? "
  read answer
  if echo "$answer" | grep -iq "^y" ;then
      echo ""
  else
      return
  fi
  
  git remote -v | grep -qi "upstream" &> /dev/null
  if [ $? != 0 ]; then
    echo $BRed"upstream remote not set up"$NC
    echo "adding upstream..."

    UPSTREAM_URL=""
    # Get the upstream repo URL
    if [[ -a "package.json" ]]; then
      UPSTREAM_URL=$(cat package.json | jq .repository.url | grep -Eo "(https?\:\/\/.+\.git)")
    fi
    
    echo "UPSTREAM_URL: $UPSTREAM_URL"

    # If there's still no upstream, ask for it
    if [ -z "$UPSTREAM_URL" ]; then
      echo "Couldn't find the upstream URL :(\nPlease paste it here (e.g. https://github.com/org/repo.git): "
      read upstream
      if [ -z "$upstream" ]; then
        echo "quitting..."
        return
      fi
      UPSTREAM_URL="$upstream"
    fi

    echo $BPurple"git remote add upstream $UPSTREAM_URL"$NC
    git remote add upstream "$UPSTREAM_URL"
    git remote -v | grep "upstream" --color=none
  fi

  echo "Fetching upstream..."
  echo $BCyan"git fetch upstream"$NC
  git fetch upstream



  echo "Branch: $BRANCH"
   
  echo "\nChecking out local branch $BRANCH"
  echo $BYellow"git checkout $BRANCH"$NC
  git checkout "$BRANCH"
 
  echo "\nMerging upstream into local"
  echo $BGreen"git merge upstream/$BRANCH"$NC
  git merge upstream/"$BRANCH"


}

gpmaster() {
  echo -e "\n";
  echo -e $BGreen"     git fetch -v --all -t -p --progress$NC\n";
  git fetch -v --all -t -p --progress;
  echo -e "\n-----------------------------\n";
  echo -e $BGreen"     git checkout master$NC\n";
  git checkout master;
  echo -e "\n-----------------------------\n";
  echo -e $BGreen"     git pull --verbose origin master$NC\n";
  git pull --verbose origin master;
  echo -e "\n-----------------------------\n";
  echo -e $BBlue"     composer dump-autoload$NC\n";
  composer dump-autoload;
  echo -e "\n";
}

gitcheck() {
  echo -e $Cyan"git checkout -b $1 origin/$1"$NC;
  git checkout -b "$1" origin/"$1";
}

gpull() { git pull origin "$1"; }

alias beanstats='echo -e $BGreen"echo -e "stats\r\n" | nc localhost 11300 | grep -E \"(current|uptime|version)\"\n\n";echo -e "stats\r\n" | nc localhost 11300 | grep -E "(current|uptime|version)"';
alias cdump='composer dump-autoload'

untar() { tar -xvzf "$1"; }
#zip() { tar -czvf "$1".gz "$1"; }

# Parse the ifconfig return for IPs (IPv4 and IPv6) and display them nicely according to adapter
# Yes, it's overkill. 
# Yes, it murders regular expressions for no reason.
# Yes, it's not necessary to use this.
# This has been tested on CentOS 6/7, and relies on grep's Perl regex matching
alias myip='ifconfig | grep -o --color=always -P "(^([A-Za-z0-9]+)\:?)|(inet|inet6)\s*(?:addr:?)?\s*((\d{1,3}\.){3}\d{1,3}|((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?)"'

# Normal Colors
export Black='\033[0;30m'        # Black
export Red='\033[0;31m'          # Red
export Green='\033[0;32m'        # Green
export Yellow='\033[0;33m'       # Yellow
export Blue='\033[0;34m'         # Blue
export Purple='\033[0;35m'       # Purple
export Cyan='\033[0;36m'         # Cyan
export White='\033[0;37m'        # White

# Bold
export BBlack='\033[1;90m'       # Black
export BRed='\033[1;91m'         # Red
export BGreen='\033[1;92m'       # Green
export BYellow='\033[1;93m'      # Yellow
export BBlue='\033[1;94m'        # Blue
export BPurple='\033[1;95m'      # Purple
export BCyan='\033[1;96m'        # Cyan
export BWhite='\033[1;97m'       # White

# Background 
export On_Black='\033[40m'       # Black
export On_Red='\033[41m'         # Red
export On_Green='\033[42m'       # Green
export On_Yellow='\033[43m'      # Yellow
export On_Blue='\033[44m'        # Blue
export On_Purple='\033[45m'      # Purple
export On_Cyan='\033[46m'        # Cyan
export On_White='\033[47m'       # White

# Background Bold
export On_BBlack='\033[100m'       # Black
export On_BRed='\033[101m'         # Red
export On_BGreen='\033[102m'       # Green
export On_BYellow='\033[103m'      # Yellow
export On_BBlue='\033[104m'        # Blue
export On_BPurple='\033[105m'      # Purple
export On_BCyan='\033[106m'        # Cyan
export On_BWhite='\033[107m'       # White

export NC="\033[m"               # Color Reset

colorcodes() {
  T='=^-^='

  echo -e "\n Normal BG          \033[1;37m\033[40m40m\033[1;0m       \033[0;30m\033[41m41m\033[1;0m       \033[0;30m\033[42m42m\033[1;0m       \033[0;30m\033[43m43m\033[1;0m       \033[0;30m\033[44m44m\033[1;0m       \033[0;30m\033[45m45m\033[1;0m       \033[0;30m\033[46m46m\033[1;0m       \033[0;30m\033[47m47m\033[1;0m";

  for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m'  '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' '  36m' '1;36m' '  37m' '1;37m';
  do
    FG=${FGs// /}
    echo -en " $FGs \033[$FG  $T  "
    for BG in 40m 41m 42m 43m 44m 45m 46m 47m;
    do
      echo -en "$EINS \033[$FG\033[$BG  $T  \033[m";
    done
    echo;
  done

  echo -e "\n High Intensity BG  \033[1;37m\033[100m100m\033[1;0m      \033[0;30m\033[101m101m\033[1;0m     \033[0;30m\033[102m102m\033[1;0m      \033[0;30m\033[103m103m\033[1;0m      \033[0;30m\033[104m104m\033[1;0m      \033[0;30m\033[105m105m\033[1;0m      \033[0;30m\033[106m106m\033[1;0m      \033[0;30m\033[107m107m\033[1;0m";

  for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m'  '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' '  36m' '1;36m' '  37m' '1;37m';
  do
    FG=${FGs// /}
    echo -en " $FGs \033[$FG  $T  "
    for BG in 100m 101m 102m 103m 104m 105m 106m 107m;
    do
      echo -en "$EINS \033[$FG\033[$BG  $T  \033[m";
    done
    echo;
  done
  echo

  echo -e "\n\033[30m\033[107mExample use:\033[m\n"
  echo '       escape prefix    \\033['
  echo '     white bold text    .    1;37m'
  echo '       escape prefix    .    .    \\033['
  echo '  magenta background    .    .    .    45m'
  echo '                text    .    .    .    .   white on magenta'
  echo '       escape prefix    .    .    .    .   .                \\033['
  echo '    clear formatting    .    .    .    .   .                .    m'
  echo '                        .    .    .    .   .                .    .'
  echo '        full command    \\033[1;37m\\033[45m white on magenta \\033[m'
  echo -e "              result                      \033[1;37m\033[45m white on magenta \033[m"

}

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"

#-----------------------------------------------------
# ADDITIONAL
#-----------------------------------------------------


# Source OS specific revisions
if [ "$(uname)" = "Darwin" ]; then
  # macOS
  if [ -f ~/.bash_macos ]; then
    . ~/.bash_macos
  fi
elif [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]; then
  # linux
  if [ -f ~/.bash_linux ]; then
    . ~/.bash_linux
  fi
elif [ "$(expr substr $(uname -s) 1 10)" = "MINGW32_NT" ]; then
  # Windows (32 bit)
  if [ -f ~/.bash_win32 ]; then
    . ~/.bash_win32
  fi
elif [ "$(expr substr $(uname -s) 1 10)" = "MINGW64_NT" ]; then
  # Windows (64 bit)
  if [ -f ~/.bash_win64 ]; then
    . ~/.bash_win64
  fi
fi
